import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import arabic_reshaper
from bidi.algorithm import get_display
import time
import random

# Function to fix Arabic labels for correct display
def fix_arabic_labels(labels):
    """
    Fix Arabic labels for correct display in visualizations.

    Parameters:
        labels (list or pd.Index): List of Arabic text labels.

    Returns:
        list: List of fixed Arabic labels.
    """
    return [get_display(arabic_reshaper.reshape(str(label))) for label in labels]

# Set page configuration
st.set_page_config(page_title="ุฏููู ุงูุฎุฑูุฌูู ูููุธุงุฆู", layout="wide")

# ุชุญุณูู ุงูุชุตููู ุงูุนุงู ุจุงุณุชุฎุฏุงู ุงูุฃููุงู ุงููุญุฏุฏุฉ
st.markdown(
    """
    <style>
    /* ุชุบููุฑ ููู ุฎูููุฉ ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ */
    .stApp {
        background-color: #000000;  /* ููู ุฎูููุฉ ุงูุตูุญุฉ */
    }
    body {
        direction: rtl;
        text-align: right;
        font-family: 'Cairo', sans-serif;
        color: #FFFFFF;  /* ููู ุงููุต ุงูุฑุฆูุณู */
    }
    .title {
        font-size: 3em;  /* ุชูุจูุฑ ุงูุนููุงู ุงูุฑุฆูุณู */
        font-weight: bold;
        text-align: center;
        color: #FFA500;  /* ููู ุงูุนููุงู ุงูุฑุฆูุณู */
    }
    .highlight {
        color: #FF8C00;  /* ููู ุงููุตูุต ุงููููุฒุฉ */
        font-weight: bold;
        font-size: 1.2em;  /* ุชูุจูุฑ ุงููุตูุต ุงููููุฒุฉ */
    }
    .subtitle {
        font-size: 2em;  /* ุชูุจูุฑ ุงูุนูุงููู ุงููุฑุนูุฉ */
        font-weight: bold;
        color: #FFA500;  /* ููู ุงูุนูุงููู ุงููุฑุนูุฉ */
    }
    .divider-custom {
        border-top: 3px solid #FF8C00;  /* ููู ุงูููุงุตู */
        margin: 20px 0;
    }
    p {
        font-size: 1.4em;  /* ุชูุจูุฑ ุงููุตูุต ุงูุนุงุฏูุฉ */
        color: #FFFFFF;  /* ููู ุงููุต ุงูุนุงุฏู */
    }
    .container {
        background-color: #1E1E1E;  /* ููู ุฎูููุฉ ุงูุญุงููุงุช */
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;  /* ุฒูุงุฏุฉ ุงููุณุงูุฉ ุจูู ุงูุญุงููุงุช */
        box-shadow: 0 4px 8px rgba(255, 165, 0, 0.2);  /* ุฅุถุงูุฉ ุธู ุจุฑุชูุงูู ููุญุงููุงุช */
    }
    .notification {
        background-color: #2E2E2E;  /* ููู ุฎูููุฉ ุงูุฅุดุนุงุฑุงุช */
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        border-left: 5px solid #FF8C00;  /* ููู ุงูุญุฏูุฏ ุงูุฌุงูุจูุฉ */
    }
    .stTable {
        background-color: #1E1E1E;  /* ููู ุฎูููุฉ ุงูุฌุฏุงูู */
        border-radius: 10px;  /* ุญูุงู ูุณุชุฏูุฑุฉ ููุฌุฏุงูู */
        padding: 10px;
    }
    .stDataFrame {
        background-color: #1E1E1E;  /* ููู ุฎูููุฉ ุงูุฌุฏุงูู */
        border-radius: 10px;  /* ุญูุงู ูุณุชุฏูุฑุฉ ููุฌุฏุงูู */
        padding: 10px;
    }
    .stButton button {
        background-color: #FFA500;  /* ููู ุฎูููุฉ ุงูุฃุฒุฑุงุฑ */
        color: #000000;  /* ููู ุงููุต ูู ุงูุฃุฒุฑุงุฑ */
        border-radius: 5px;  /* ุญูุงู ูุณุชุฏูุฑุฉ ููุฃุฒุฑุงุฑ */
        padding: 10px 20px;
        font-size: 1.2em;
    }
    .stButton button:hover {
        background-color: #FF8C00;  /* ููู ุฎูููุฉ ุงูุฃุฒุฑุงุฑ ุนูุฏ ุงูุชูุฑูุฑ */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Title
st.markdown('<p class="title">๐ ุฏููู ุงูุฎุฑูุฌูู ูููุธุงุฆู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ</p>', unsafe_allow_html=True)

# Load the dataset
@st.cache_data  # Cache the data to improve performance
def load_data():
    try:
        data = pd.read_csv("cleaned_data.csv")
        return data
    except FileNotFoundError:
        st.error("ุงูููู 'cleaned_data.csv' ุบูุฑ ููุฌูุฏ. ูุฑุฌู ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูููู ูู ุงููุณุงุฑ ุงูุตุญูุญ.")
        return pd.DataFrame()  # Return an empty DataFrame if file not found

df = load_data()

# Check if data is loaded successfully
if df.empty:
    st.stop()  # Stop the app if data is not loaded

# Sidebar for filters
st.sidebar.header("ุงูููุงุชุฑ")
region_filter = st.sidebar.multiselect(
    "ุงุฎุชุฑ ุงูููุงุทู", 
    df["region"].unique()
)
gender_filter = st.sidebar.multiselect("ุงุฎุชุฑ ุงูุฌูุณ", df["gender"].unique())

# Apply filters
if region_filter:
    df = df[df["region"].isin(region_filter)]
if gender_filter:
    df = df[df["gender"].isin(gender_filter)]

# Introduction
with st.container():
    st.markdown("""
        <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
            <p class="highlight">## ๐ ูุฑุญุจุงู ุจู ูู ุฏููู ุงูุฎุฑูุฌูู ูููุธุงุฆู!</p>
            <p class="highlight">ุฃูุช ุฎุฑูุฌ ุฌุฏูุฏ ุชุจุญุซ ุนู ูุฑุตุฉ ุนูู ูุจุฏุก ูุณูุฑุชู ุงูููููุฉ. ูุฐุง ุงูุชุทุจูู ุณูุณุงุนุฏู ุนูู ููู ุณูู ุงูุนูู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ ูุงุชุฎุงุฐ ูุฑุงุฑุงุช ูุฏุฑูุณุฉ.</p>
        </div>
    """, unsafe_allow_html=True)

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# ุนุจุงุฑุงุช ูุญูุฒุฉ ุฏุงุฎู ุญุงููุฉ
with st.container():
    st.markdown("""
        <div style="background-color: #2E2E2E; padding: 20px; border-radius: 10px;">
            <p class="highlight">โจ "ุงููุฌุงุญ ูุจุฏุฃ ุจุฎุทูุฉ ูุงุญุฏุฉ.. ุงุจุฏุฃ ุงูุขู!"</p>
            <p class="highlight">๐ผ "ูู ูุธููุฉ ูู ูุฑุตุฉ ุฌุฏูุฏุฉ ูุจูุงุก ูุณุชูุจู ูุดุฑู."</p>
            <p class="highlight">๐ "ูุง ุชูุชุธุฑ ุงููุฑุตุฉุ ุงุตูุนูุง ุจููุณู."</p>
        </div>
    """, unsafe_allow_html=True)

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# ููุฏูุฉ ูุดููุฉ ุฏุงุฎู ุญุงููุฉ
with st.container():
    st.markdown("""
        <div style="background-color: #E9EDC9; padding: 20px; border-radius: 10px;">
            ## ๐ ููุฏูุฉ ูุดููุฉ: ููุงุฐุง ูุฐุง ุงูุชุทุจููุ
            "ุฃูุช ุฎุฑูุฌ ุฌุฏูุฏุ ุชุจุญุซ ุนู ูุฑุตุชู ุงูุฃููู ูู ุณูู ุงูุนููุ ๐ค ุชุฑูุฏ ูุนุฑูุฉ ุชููุนุงุช ุงูุฑูุงุชุจุ ูุฃูู ุชุชุฑูุฒ ุงููุธุงุฆูุ ููุง ูู ุงููุฑุต ุงููุชุงุญุฉ ุญุณุจ ุงูุฎุจุฑุฉุ ๐ฏ"

            ูุฐุง ุงูุฏููู ุงูุชูุงุนูู ุณูุณุงุนุฏู ูู ุงุชุฎุงุฐ ูุฑุงุฑุงุช ูุฏุฑูุณุฉ ุญูู ูุณุชูุจูู ุงููููู ูู ุงูุณุนูุฏูุฉ. ุงุณุชุนุฏ ูุงุณุชูุดุงู ุจูุงูุงุช ูููุฏุฉ ุญูู ุงูุฑูุงุชุจุ ุงูููุงุทูุ ููุชุทูุจุงุช ุณูู ุงูุนูู.

            ### ๐ฐ ูุง ูู ูุทุงู ุงูุฑูุงุชุจ ุงููุชููุนุ
            ูู ูุฏูู ูุถูู ุญูู ุงูุฑูุงุชุจ ุงูุชู ูููู ุฃู ุชุชููุนูุง ูุฎุฑูุฌ ุฌุฏูุฏุ ๐ค

            - ุงุณุชุนุฑุถ ูุฎุทุท ุงูุฑุงุชุจ ูุชููู ุงูุชูุฒูุน ุงูุนุงู ููุฑูุงุชุจ.
            - ุชุตูุญ ุงูุฅุญุตุงุฆูุงุช ููุนุฑูุฉ ุงูุญุฏ ุงูุฃุฏููุ ุงููุชูุณุทุ ูุงูุญุฏ ุงูุฃูุตู ููุฃุฌูุฑ.
            - ุงุณุชุฎุฏู ุงูููุงุชุฑ ูุชุญุฏูุฏ ุงูุฑูุงุชุจ ุจูุงุกู ุนูู ููุทูุชู ุฃู ูุฌุงูู.

            **๐ ุงููุนุฑูุฉ ููุฉ โ ูููู ูุทุงู ุงูุฑูุงุชุจ ูุณุงุนุฏู ูู ุชุญุฏูุฏ ุชููุนุงุชู ุฃุซูุงุก ุงูุจุญุซ ุนู ูุธููุฉ!**

            ### ๐ ูู ููุงู ูุฑุต ููุฎุฑูุฌูู ุงูุฌุฏุฏุ
            ุฃุญูุงููุง ูุธู ุงููุงุณ ุฃู ุงููุธุงุฆู ูุชุงุญุฉ ููุท ูุฃุตุญุงุจ ุงูุฎุจุฑุฉุ ููู ูู ูุฐุง ุตุญูุญุ ๐ค

            ูู ุฎูุงู ูุฐุง ุงูุชุญูููุ ุณุชุชููู ูู ูุนุฑูุฉ ุนุฏุฏ ุงููุฑุต ุงููุชุงุญุฉ ููุฎุฑูุฌูู ุงูุฌุฏุฏ ููุงุฑูุฉู ุจุฃุตุญุงุจ ุงูุฎุจุฑุฉ. ูุฏ ุชุชูุงุฌุฃ ุจุงููุชุงุฆุฌ! ๐ฏ

            ### ๐ ุฃูู ุชุฌุฏ ุฃูุซุฑ ุงููุธุงุฆูุ
            ุงููุฑุต ููุณุช ูุชุณุงููุฉ ูู ูู ููุงูุ ุจุนุถ ุงูููุงุทู ุชุฒุฏูุฑ ุจุงููุธุงุฆู ุจูููุง ุบูุฑูุง ูุฏ ูููู ุฃูู ูุดุงุทูุง.

            - ูู ุงูุฑูุงุถ ูู ุงููุฌูุฉ ุงููุซุงููุฉุ
            - ูุงุฐุง ุนู ุฌุฏุฉ ุฃู ุงูุฏูุงูุ
            - ุฃูู ูุฌุจ ุฃู ุชุฑูุฒ ุจุญุซู ุนู ุงููุธุงุฆูุ

            ุงูุชุดู ุฎุฑูุทุฉ ุชูุฒูุน ุงููุธุงุฆู ูู ุงูุณุนูุฏูุฉ ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูุญููููุฉ. ๐บ๏ธ
        </div>
    """, unsafe_allow_html=True)


# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# Progress Bar for Loading
with st.container():
    with st.spinner("ุฌุงุฑู ุชุญููู ุงูุจูุงูุงุช..."):
        progress_bar = st.progress(0)
        for i in range(100):
            progress_bar.progress(i + 1)
        st.success("ุชู ุชุญููู ุงูุจูุงูุงุช ุจูุฌุงุญ!")

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# Section 1: Salary Range for Fresh Graduates
with st.container():
    st.markdown("""
        <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
            <h2 style="color: #FFA500;">๐ฐ ูุทุงู ุงูุฑุงุชุจ ุงููุชููุน ููุฎุฑูุฌูู ุงูุฌุฏุฏ</h2>
            <p class="highlight">ูุง ูู ูุทุงู ุงูุฑุงุชุจ ุงููุชููุน ููุฎุฑูุฌูู ุงูุฌุฏุฏุ ูุฐุง ุณูุณุงุนุฏู ุนูู ุชุญุฏูุฏ ุงูุชููุนุงุช ุงููุงููุฉ.</p>
        </div>
    """, unsafe_allow_html=True)

    # Filter data for fresh graduates
    fresh_graduates = df[df['exper'] == '0 Years']

    # Use Columns for Layout
    col1, col2 = st.columns(2)

    with col1:
        # Histogram
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.histplot(fresh_graduates['Salary'], kde=True, color='#FFA500', ax=ax)
        ax.set_xlabel(get_display(arabic_reshaper.reshape("ุงูุฑุงุชุจ")))
        ax.set_ylabel(get_display(arabic_reshaper.reshape("ุงูุชูุฑุงุฑ")))
        ax.set_title(get_display(arabic_reshaper.reshape("ูุทุงู ุงูุฑุงุชุจ ุงููุชููุน ูุฎุฑูุฌู ุงูุฌุฏุฏ")))
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    with col2:
        # Table
        st.markdown("""
            <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
                <h3 style="color: #FFA500;">ุฌุฏูู ูุทุงู ุงูุฑุงุชุจ ุงููุชููุน</h3>
            </div>
        """, unsafe_allow_html=True)
        salary_summary = fresh_graduates['Salary'].describe().rename({
            "count": "ุนุฏุฏ",
            "mean": "ูุชูุณุท",
            "std": "ุงูุญุฑุงู ูุนูุงุฑู",
            "min": "ุงูุญุฏ ุงูุฃุฏูู",
            "25%": "25%",
            "50%": "50%",
            "75%": "75%",
            "max": "ุงูุญุฏ ุงูุฃูุตู"
        })
        st.table(salary_summary.reset_index().rename(columns={"index": "ุงูุฅุญุตุงุฆูุฉ", "Salary": "ุงููููุฉ"}))

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# Section 2: Job Opportunities by Experience Level
with st.container():
    st.markdown("""
        <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
            <h2 style="color: #FFA500;">๐ ูุฑุต ุงูุนูู ุญุณุจ ูุณุชูู ุงูุฎุจุฑุฉ</h2>
            <p class="highlight">ูู ูุฑุต ุงูุนูู ููุฌูุฉ ุฃูุซุฑ ููุฃูุฑุงุฏ ุฐูู ุงูุฎุจุฑุฉ ุฃู ุฃู ููุงู ูุฑุตุงู ููุฎุฑูุฌูู ุงูุฌุฏุฏุ</p>
        </div>
    """, unsafe_allow_html=True)

    # Calculate experience counts
    experience_counts = df['exper'].value_counts()

    # Use Columns for Layout
    col1, col2 = st.columns(2)

    with col1:
        # Bar Plot
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.barplot(x=experience_counts.values, y=fix_arabic_labels(experience_counts.index), palette="Oranges", ax=ax)
        ax.set_xlabel(get_display(arabic_reshaper.reshape("ุนุฏุฏ ุงููุธุงุฆู")))
        ax.set_ylabel(get_display(arabic_reshaper.reshape("ูุณุชูู ุงูุฎุจุฑุฉ")))
        ax.set_title(get_display(arabic_reshaper.reshape("ูุฑุต ุงูุนูู ุญุณุจ ูุณุชูู ุงูุฎุจุฑุฉ")))
        plt.grid(axis='x', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    with col2:
        # Table
        st.markdown("""
            <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
                <h3 style="color: #FFA500;">ุฌุฏูู ูุฑุต ุงูุนูู ุญุณุจ ูุณุชูู ุงูุฎุจุฑุฉ</h3>
            </div>
        """, unsafe_allow_html=True)
        st.table(experience_counts.reset_index().rename(columns={"index": "ูุณุชูู ุงูุฎุจุฑุฉ", "exper": "ุนุฏุฏ ุงููุธุงุฆู"}))

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# Section 3: Job Postings by Region
with st.container():
    st.markdown("""
        <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
            <h2 style="color: #FFA500;">๐ ุชูุฒูุน ุงููุธุงุฆู ุญุณุจ ุงูููุทูุฉ</h2>
            <p class="highlight">ููุจุฏุฃ ุจุงุณุชูุดุงู ุงูููุงุทู ุงูุชู ุชุชุฑูุฒ ูููุง ูุฑุต ุงูุนูู. ูุฐุง ุณูุณุงุนุฏู ุนูู ุชุญุฏูุฏ ุฃูุถู ุงูููุงุทู ููุจุญุซ ุนู ูุธููุฉ.</p>
        </div>
    """, unsafe_allow_html=True)

    # Calculate region counts
    region_counts = df['region'].value_counts()

    # Use Columns for Layout
    col1, col2 = st.columns(2)

    with col1:
        # Bar Plot
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.barplot(x=region_counts.values, y=fix_arabic_labels(region_counts.index), palette="Oranges", ax=ax)
        ax.set_xlabel(get_display(arabic_reshaper.reshape("ุนุฏุฏ ุงููุธุงุฆู")))
        ax.set_ylabel(get_display(arabic_reshaper.reshape("ุงูููุทูุฉ")))
        ax.set_title(get_display(arabic_reshaper.reshape("ุชูุฒูุน ุงููุธุงุฆู ุญุณุจ ุงูููุทูุฉ")))
        plt.grid(axis='x', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    with col2:
        # Table
        st.markdown("""
            <div style="background-color: #1E1E1E; padding: 20px; border-radius: 10px;">
                <h3 style="color: #FFA500;">ุฌุฏูู ุชูุฒูุน ุงููุธุงุฆู ุญุณุจ ุงูููุทูุฉ</h3>
            </div>
        """, unsafe_allow_html=True)
        st.table(region_counts.reset_index().rename(columns={"index": "ุงูููุทูุฉ", "region": "ุนุฏุฏ ุงููุธุงุฆู"}))

# ูุณุงูุฉ ุจูู ุงูููุฑุงุช
st.markdown("<br><br>", unsafe_allow_html=True)

# Footer
with st.container():
    st.markdown("---")
    st.markdown("๐ **ุดูุฑุงู ูู ุนูู ุงุณุชุฎุฏุงู ุฏููู ุงูุฎุฑูุฌูู ูููุธุงุฆู! ูุชููู ูู ุงูุชูููู ูู ูุณูุฑุชู ุงูููููุฉ.**")

# ุฅุดุนุงุฑุงุช ุชุญููุฒูุฉ ูู 30 ุซุงููุฉ
if 'notification_time' not in st.session_state:
    st.session_state.notification_time = time.time()

if time.time() - st.session_state.notification_time > 30:  # ูู 30 ุซุงููุฉ
    motivational_messages = [
        "โจ ุงููุฌุงุญ ูุจุฏุฃ ุจุฎุทูุฉ ูุงุญุฏุฉ.. ุงุจุฏุฃ ุงูุขู!",
        "๐ผ ูู ูุธููุฉ ูู ูุฑุตุฉ ุฌุฏูุฏุฉ ูุจูุงุก ูุณุชูุจู ูุดุฑู.",
        "๐ ูุง ุชูุชุธุฑ ุงููุฑุตุฉุ ุงุตูุนูุง ุจููุณู.",
        "๐ ุงููุณุชูุจู ูุจุฏุฃ ุจูุฑุงุฑ ุฐูู.. ุฎุฐ ุฎุทูุชู ุงูุขู!",
        "๐ ุงูุจูุงูุงุช ูู ููุชุงุญ ุงุชุฎุงุฐ ุงููุฑุงุฑุงุช ุงูุตุญูุญุฉ.",
        "๐ก ูู ููู ูู ูุฑุตุฉ ุฌุฏูุฏุฉ ูุชุญููู ุงููุฌุงุญ.",
        "๐ ุงููุฌุงุญ ููุณ ูุตููุงูุ ุจู ุฑุญูุฉ ูุณุชูุฑุฉ.",
    ]
    selected_message = random.choice(motivational_messages)
    st.markdown(f'<div class="notification">{selected_message}</div>', unsafe_allow_html=True)
    st.session_state.notification_time = time.time()  # ุฅุนุงุฏุฉ ุถุจุท ุงููุคูุช